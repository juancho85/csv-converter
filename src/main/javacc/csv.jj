options {
  UNICODE_INPUT = true;
  STATIC = false;
}

PARSER_BEGIN(CSV)
package com.juancho85.parser.generated;

import java.io.InputStream;
import com.juancho85.parser.ParserInterface;
import java.util.List;
import java.util.ArrayList;

public class CSV {
    static CSV csv = null;
    private static String cleanField(String stringChain) {
        if (stringChain.startsWith("\"")) {
            return stringChain.substring(1, stringChain.length() - 1).replaceAll("\"\"", "\"");
        }
        return stringChain;
    }

    public static void parse(InputStream is, ParserInterface parser) throws ParseException {
         csv = new CSV(is);
         csv.csvFile(parser);
    }

}

PARSER_END(CSV)

SKIP :
{
    " "
|   "\r"
|   "\t"
}

TOKEN:
{
   <FIELD: ( "\"" ( (~["\""]) | ("\"\"") )* "\"" ) | (~["\t","\r","\n",","] )* > |
   <COMMA: "," > |
   <NEWLINE: ("\r\n" | "\n" | "\r") >
}

void csvFile(ParserInterface parser) :
{
        int linesRead = 0;
}
{
   ((linesRead = csvData(parser, linesRead))? (<NEWLINE > (linesRead = csvData(parser, linesRead))?)* <EOF > )
}

int csvData(ParserInterface parser, int linesRead) :
{
 List<String> l = new ArrayList<String>();
 Token t;
}
{
   ( t = <FIELD> {l.add(cleanField(t.image)); }
     ( <COMMA> t = <FIELD> {l.add(cleanField(t.image)); } )*
   )
   {

    // TODO: ignore headers if they are provided (or actually use them)
    if (linesRead == 0 && parser.getHeaders().isEmpty()) {
        parser.setHeaders(l);
    } else {
        parser.parse(l);
    }

    return ++linesRead;
   }

}